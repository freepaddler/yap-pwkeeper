// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_Register_FullMethodName = "/grpcapi.Auth/register"
	Auth_Login_FullMethodName    = "/grpcapi.Auth/login"
	Auth_Refresh_FullMethodName  = "/grpcapi.Auth/Refresh"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Register(ctx context.Context, in *LoginCredentials, opts ...grpc.CallOption) (*Token, error)
	Login(ctx context.Context, in *LoginCredentials, opts ...grpc.CallOption) (*Token, error)
	Refresh(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Register(ctx context.Context, in *LoginCredentials, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, Auth_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Login(ctx context.Context, in *LoginCredentials, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, Auth_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Refresh(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, Auth_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	Register(context.Context, *LoginCredentials) (*Token, error)
	Login(context.Context, *LoginCredentials) (*Token, error)
	Refresh(context.Context, *Token) (*Token, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Register(context.Context, *LoginCredentials) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method register not implemented")
}
func (UnimplementedAuthServer) Login(context.Context, *LoginCredentials) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method login not implemented")
}
func (UnimplementedAuthServer) Refresh(context.Context, *Token) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*LoginCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Refresh(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _Auth_Register_Handler,
		},
		{
			MethodName: "login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Auth_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

const (
	Wallet_GetUpdateStream_FullMethodName  = "/grpcapi.Wallet/GetUpdateStream"
	Wallet_AddNote_FullMethodName          = "/grpcapi.Wallet/AddNote"
	Wallet_DeleteNote_FullMethodName       = "/grpcapi.Wallet/DeleteNote"
	Wallet_UpdateNote_FullMethodName       = "/grpcapi.Wallet/UpdateNote"
	Wallet_AddCredential_FullMethodName    = "/grpcapi.Wallet/AddCredential"
	Wallet_DeleteCredential_FullMethodName = "/grpcapi.Wallet/DeleteCredential"
	Wallet_UpdateCredential_FullMethodName = "/grpcapi.Wallet/UpdateCredential"
	Wallet_AddCard_FullMethodName          = "/grpcapi.Wallet/AddCard"
	Wallet_DeleteCard_FullMethodName       = "/grpcapi.Wallet/DeleteCard"
	Wallet_UpdateCard_FullMethodName       = "/grpcapi.Wallet/UpdateCard"
)

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletClient interface {
	GetUpdateStream(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (Wallet_GetUpdateStreamClient, error)
	AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Empty, error)
	DeleteNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Empty, error)
	UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Empty, error)
	AddCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Empty, error)
	DeleteCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Empty, error)
	UpdateCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Empty, error)
	AddCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error)
	DeleteCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error)
	UpdateCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error)
}

type walletClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletClient(cc grpc.ClientConnInterface) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) GetUpdateStream(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (Wallet_GetUpdateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Wallet_ServiceDesc.Streams[0], Wallet_GetUpdateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &walletGetUpdateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wallet_GetUpdateStreamClient interface {
	Recv() (*UpdateResponse, error)
	grpc.ClientStream
}

type walletGetUpdateStreamClient struct {
	grpc.ClientStream
}

func (x *walletGetUpdateStreamClient) Recv() (*UpdateResponse, error) {
	m := new(UpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletClient) AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Wallet_AddNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) DeleteNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Wallet_DeleteNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Wallet_UpdateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Wallet_AddCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) DeleteCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Wallet_DeleteCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Wallet_UpdateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Wallet_AddCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) DeleteCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Wallet_DeleteCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Wallet_UpdateCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
// All implementations must embed UnimplementedWalletServer
// for forward compatibility
type WalletServer interface {
	GetUpdateStream(*UpdateRequest, Wallet_GetUpdateStreamServer) error
	AddNote(context.Context, *Note) (*Empty, error)
	DeleteNote(context.Context, *Note) (*Empty, error)
	UpdateNote(context.Context, *Note) (*Empty, error)
	AddCredential(context.Context, *Credential) (*Empty, error)
	DeleteCredential(context.Context, *Credential) (*Empty, error)
	UpdateCredential(context.Context, *Credential) (*Empty, error)
	AddCard(context.Context, *Card) (*Empty, error)
	DeleteCard(context.Context, *Card) (*Empty, error)
	UpdateCard(context.Context, *Card) (*Empty, error)
	mustEmbedUnimplementedWalletServer()
}

// UnimplementedWalletServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (UnimplementedWalletServer) GetUpdateStream(*UpdateRequest, Wallet_GetUpdateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUpdateStream not implemented")
}
func (UnimplementedWalletServer) AddNote(context.Context, *Note) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNote not implemented")
}
func (UnimplementedWalletServer) DeleteNote(context.Context, *Note) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (UnimplementedWalletServer) UpdateNote(context.Context, *Note) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (UnimplementedWalletServer) AddCredential(context.Context, *Credential) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCredential not implemented")
}
func (UnimplementedWalletServer) DeleteCredential(context.Context, *Credential) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedWalletServer) UpdateCredential(context.Context, *Credential) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedWalletServer) AddCard(context.Context, *Card) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedWalletServer) DeleteCard(context.Context, *Card) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedWalletServer) UpdateCard(context.Context, *Card) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedWalletServer) mustEmbedUnimplementedWalletServer() {}

// UnsafeWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServer will
// result in compilation errors.
type UnsafeWalletServer interface {
	mustEmbedUnimplementedWalletServer()
}

func RegisterWalletServer(s grpc.ServiceRegistrar, srv WalletServer) {
	s.RegisterService(&Wallet_ServiceDesc, srv)
}

func _Wallet_GetUpdateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServer).GetUpdateStream(m, &walletGetUpdateStreamServer{stream})
}

type Wallet_GetUpdateStreamServer interface {
	Send(*UpdateResponse) error
	grpc.ServerStream
}

type walletGetUpdateStreamServer struct {
	grpc.ServerStream
}

func (x *walletGetUpdateStreamServer) Send(m *UpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Wallet_AddNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_AddNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_DeleteNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).DeleteNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpdateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_AddCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddCredential(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).DeleteCredential(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpdateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateCredential(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_AddCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddCard(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_DeleteCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).DeleteCard(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_UpdateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateCard(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

// Wallet_ServiceDesc is the grpc.ServiceDesc for Wallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNote",
			Handler:    _Wallet_AddNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _Wallet_DeleteNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _Wallet_UpdateNote_Handler,
		},
		{
			MethodName: "AddCredential",
			Handler:    _Wallet_AddCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _Wallet_DeleteCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _Wallet_UpdateCredential_Handler,
		},
		{
			MethodName: "AddCard",
			Handler:    _Wallet_AddCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _Wallet_DeleteCard_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _Wallet_UpdateCard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpdateStream",
			Handler:       _Wallet_GetUpdateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
