// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_Register_FullMethodName = "/grpcapi.Auth/Register"
	Auth_Login_FullMethodName    = "/grpcapi.Auth/Login"
	Auth_Refresh_FullMethodName  = "/grpcapi.Auth/Refresh"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Register(ctx context.Context, in *LoginCredentials, opts ...grpc.CallOption) (*Empty, error)
	Login(ctx context.Context, in *LoginCredentials, opts ...grpc.CallOption) (*Token, error)
	Refresh(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Register(ctx context.Context, in *LoginCredentials, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Auth_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Login(ctx context.Context, in *LoginCredentials, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, Auth_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Refresh(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, Auth_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	Register(context.Context, *LoginCredentials) (*Empty, error)
	Login(context.Context, *LoginCredentials) (*Token, error)
	Refresh(context.Context, *Token) (*Token, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Register(context.Context, *LoginCredentials) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServer) Login(context.Context, *LoginCredentials) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) Refresh(context.Context, *Token) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*LoginCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Refresh(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Auth_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Auth_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

const (
	Docs_GetUpdateStream_FullMethodName  = "/grpcapi.Docs/GetUpdateStream"
	Docs_AddNote_FullMethodName          = "/grpcapi.Docs/AddNote"
	Docs_DeleteNote_FullMethodName       = "/grpcapi.Docs/DeleteNote"
	Docs_UpdateNote_FullMethodName       = "/grpcapi.Docs/UpdateNote"
	Docs_AddCredential_FullMethodName    = "/grpcapi.Docs/AddCredential"
	Docs_DeleteCredential_FullMethodName = "/grpcapi.Docs/DeleteCredential"
	Docs_UpdateCredential_FullMethodName = "/grpcapi.Docs/UpdateCredential"
	Docs_AddCard_FullMethodName          = "/grpcapi.Docs/AddCard"
	Docs_DeleteCard_FullMethodName       = "/grpcapi.Docs/DeleteCard"
	Docs_UpdateCard_FullMethodName       = "/grpcapi.Docs/UpdateCard"
	Docs_AddFile_FullMethodName          = "/grpcapi.Docs/AddFile"
	Docs_DeleteFile_FullMethodName       = "/grpcapi.Docs/DeleteFile"
	Docs_UpdateFile_FullMethodName       = "/grpcapi.Docs/UpdateFile"
	Docs_GetFile_FullMethodName          = "/grpcapi.Docs/GetFile"
)

// DocsClient is the client API for Docs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocsClient interface {
	GetUpdateStream(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (Docs_GetUpdateStreamClient, error)
	AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Empty, error)
	DeleteNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Empty, error)
	UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Empty, error)
	AddCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Empty, error)
	DeleteCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Empty, error)
	UpdateCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Empty, error)
	AddCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error)
	DeleteCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error)
	UpdateCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error)
	AddFile(ctx context.Context, opts ...grpc.CallOption) (Docs_AddFileClient, error)
	DeleteFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*Empty, error)
	UpdateFile(ctx context.Context, opts ...grpc.CallOption) (Docs_UpdateFileClient, error)
	GetFile(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (Docs_GetFileClient, error)
}

type docsClient struct {
	cc grpc.ClientConnInterface
}

func NewDocsClient(cc grpc.ClientConnInterface) DocsClient {
	return &docsClient{cc}
}

func (c *docsClient) GetUpdateStream(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (Docs_GetUpdateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Docs_ServiceDesc.Streams[0], Docs_GetUpdateStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &docsGetUpdateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Docs_GetUpdateStreamClient interface {
	Recv() (*UpdateResponse, error)
	grpc.ClientStream
}

type docsGetUpdateStreamClient struct {
	grpc.ClientStream
}

func (x *docsGetUpdateStreamClient) Recv() (*UpdateResponse, error) {
	m := new(UpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *docsClient) AddNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Docs_AddNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) DeleteNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Docs_DeleteNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Docs_UpdateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) AddCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Docs_AddCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) DeleteCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Docs_DeleteCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) UpdateCredential(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Docs_UpdateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) AddCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Docs_AddCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) DeleteCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Docs_DeleteCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) UpdateCard(ctx context.Context, in *Card, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Docs_UpdateCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) AddFile(ctx context.Context, opts ...grpc.CallOption) (Docs_AddFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Docs_ServiceDesc.Streams[1], Docs_AddFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &docsAddFileClient{stream}
	return x, nil
}

type Docs_AddFileClient interface {
	Send(*FileStream) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type docsAddFileClient struct {
	grpc.ClientStream
}

func (x *docsAddFileClient) Send(m *FileStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *docsAddFileClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *docsClient) DeleteFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Docs_DeleteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docsClient) UpdateFile(ctx context.Context, opts ...grpc.CallOption) (Docs_UpdateFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Docs_ServiceDesc.Streams[2], Docs_UpdateFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &docsUpdateFileClient{stream}
	return x, nil
}

type Docs_UpdateFileClient interface {
	Send(*FileStream) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type docsUpdateFileClient struct {
	grpc.ClientStream
}

func (x *docsUpdateFileClient) Send(m *FileStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *docsUpdateFileClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *docsClient) GetFile(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (Docs_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Docs_ServiceDesc.Streams[3], Docs_GetFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &docsGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Docs_GetFileClient interface {
	Recv() (*FileStream, error)
	grpc.ClientStream
}

type docsGetFileClient struct {
	grpc.ClientStream
}

func (x *docsGetFileClient) Recv() (*FileStream, error) {
	m := new(FileStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DocsServer is the server API for Docs service.
// All implementations must embed UnimplementedDocsServer
// for forward compatibility
type DocsServer interface {
	GetUpdateStream(*UpdateRequest, Docs_GetUpdateStreamServer) error
	AddNote(context.Context, *Note) (*Empty, error)
	DeleteNote(context.Context, *Note) (*Empty, error)
	UpdateNote(context.Context, *Note) (*Empty, error)
	AddCredential(context.Context, *Credential) (*Empty, error)
	DeleteCredential(context.Context, *Credential) (*Empty, error)
	UpdateCredential(context.Context, *Credential) (*Empty, error)
	AddCard(context.Context, *Card) (*Empty, error)
	DeleteCard(context.Context, *Card) (*Empty, error)
	UpdateCard(context.Context, *Card) (*Empty, error)
	AddFile(Docs_AddFileServer) error
	DeleteFile(context.Context, *File) (*Empty, error)
	UpdateFile(Docs_UpdateFileServer) error
	GetFile(*DocumentRequest, Docs_GetFileServer) error
	mustEmbedUnimplementedDocsServer()
}

// UnimplementedDocsServer must be embedded to have forward compatible implementations.
type UnimplementedDocsServer struct {
}

func (UnimplementedDocsServer) GetUpdateStream(*UpdateRequest, Docs_GetUpdateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUpdateStream not implemented")
}
func (UnimplementedDocsServer) AddNote(context.Context, *Note) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNote not implemented")
}
func (UnimplementedDocsServer) DeleteNote(context.Context, *Note) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (UnimplementedDocsServer) UpdateNote(context.Context, *Note) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (UnimplementedDocsServer) AddCredential(context.Context, *Credential) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCredential not implemented")
}
func (UnimplementedDocsServer) DeleteCredential(context.Context, *Credential) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedDocsServer) UpdateCredential(context.Context, *Credential) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedDocsServer) AddCard(context.Context, *Card) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCard not implemented")
}
func (UnimplementedDocsServer) DeleteCard(context.Context, *Card) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedDocsServer) UpdateCard(context.Context, *Card) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedDocsServer) AddFile(Docs_AddFileServer) error {
	return status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedDocsServer) DeleteFile(context.Context, *File) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedDocsServer) UpdateFile(Docs_UpdateFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedDocsServer) GetFile(*DocumentRequest, Docs_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedDocsServer) mustEmbedUnimplementedDocsServer() {}

// UnsafeDocsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocsServer will
// result in compilation errors.
type UnsafeDocsServer interface {
	mustEmbedUnimplementedDocsServer()
}

func RegisterDocsServer(s grpc.ServiceRegistrar, srv DocsServer) {
	s.RegisterService(&Docs_ServiceDesc, srv)
}

func _Docs_GetUpdateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocsServer).GetUpdateStream(m, &docsGetUpdateStreamServer{stream})
}

type Docs_GetUpdateStreamServer interface {
	Send(*UpdateResponse) error
	grpc.ServerStream
}

type docsGetUpdateStreamServer struct {
	grpc.ServerStream
}

func (x *docsGetUpdateStreamServer) Send(m *UpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Docs_AddNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).AddNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_AddNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).AddNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_DeleteNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).DeleteNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_UpdateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).UpdateNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_AddCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).AddCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_AddCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).AddCredential(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).DeleteCredential(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_UpdateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).UpdateCredential(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_AddCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).AddCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_AddCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).AddCard(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_DeleteCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).DeleteCard(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Card)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_UpdateCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).UpdateCard(ctx, req.(*Card))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_AddFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocsServer).AddFile(&docsAddFileServer{stream})
}

type Docs_AddFileServer interface {
	SendAndClose(*Empty) error
	Recv() (*FileStream, error)
	grpc.ServerStream
}

type docsAddFileServer struct {
	grpc.ServerStream
}

func (x *docsAddFileServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *docsAddFileServer) Recv() (*FileStream, error) {
	m := new(FileStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Docs_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocsServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docs_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocsServer).DeleteFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docs_UpdateFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocsServer).UpdateFile(&docsUpdateFileServer{stream})
}

type Docs_UpdateFileServer interface {
	SendAndClose(*Empty) error
	Recv() (*FileStream, error)
	grpc.ServerStream
}

type docsUpdateFileServer struct {
	grpc.ServerStream
}

func (x *docsUpdateFileServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *docsUpdateFileServer) Recv() (*FileStream, error) {
	m := new(FileStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Docs_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DocumentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DocsServer).GetFile(m, &docsGetFileServer{stream})
}

type Docs_GetFileServer interface {
	Send(*FileStream) error
	grpc.ServerStream
}

type docsGetFileServer struct {
	grpc.ServerStream
}

func (x *docsGetFileServer) Send(m *FileStream) error {
	return x.ServerStream.SendMsg(m)
}

// Docs_ServiceDesc is the grpc.ServiceDesc for Docs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Docs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.Docs",
	HandlerType: (*DocsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNote",
			Handler:    _Docs_AddNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _Docs_DeleteNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _Docs_UpdateNote_Handler,
		},
		{
			MethodName: "AddCredential",
			Handler:    _Docs_AddCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _Docs_DeleteCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _Docs_UpdateCredential_Handler,
		},
		{
			MethodName: "AddCard",
			Handler:    _Docs_AddCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _Docs_DeleteCard_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _Docs_UpdateCard_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Docs_DeleteFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpdateStream",
			Handler:       _Docs_GetUpdateStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddFile",
			Handler:       _Docs_AddFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateFile",
			Handler:       _Docs_UpdateFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _Docs_GetFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
