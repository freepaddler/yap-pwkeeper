package jwtToken

import (
	"crypto/rand"
	"errors"
	"fmt"
	"time"

	"github.com/golang-jwt/jwt/v5"
	"github.com/google/uuid"

	"yap-pwkeeper/internal/pkg/logger"
)

var (
	ErrNoSubject = errors.New("no subject for jwt")
	ErrSign      = errors.New("failed to sign jwt")
	ErrInvalid   = errors.New("invalid jwt")
	jwtKey       []byte
	jwtTTL       = 2 * time.Hour
	jwtSign      = jwt.SigningMethodHS256
)

func init() {
	jwtKey = make([]byte, 64)
	_, _ = rand.Read(jwtKey)
}

func SetKey(key string) {
	if len(key) < 8 {
		logger.Log().Warn("token key is too short, using autogenerated")
		return
	}
	jwtKey = []byte(key)
}

func SetTTL(ttl time.Duration) {
	jwtTTL = ttl
}

type JWTClaims struct {
	jwt.RegisteredClaims
	Session string `json:"session,omitempty"`
}

func genToken(subject string, session string) (string, error) {
	var signed string
	if session == "" {
		session = uuid.NewString()
	}
	if subject == "" {
		return signed, ErrNoSubject
	}
	claims := &JWTClaims{
		RegisteredClaims: jwt.RegisteredClaims{
			Subject:   subject,
			ExpiresAt: jwt.NewNumericDate(time.Now().Add(jwtTTL)),
			NotBefore: jwt.NewNumericDate(time.Now()),
			IssuedAt:  jwt.NewNumericDate(time.Now()),
			ID:        uuid.NewString(),
		},
		Session: session,
	}
	token := jwt.NewWithClaims(jwtSign, claims)
	signed, err := token.SignedString(jwtKey)
	if err != nil {
		return signed, fmt.Errorf("%w: %w", ErrSign, err)
	}
	return signed, nil
}

func NewToken(subject string) (string, error) {
	return genToken(subject, "")
}

func RefreshToken(token string) (string, error) {
	if !Valid(token) {
		return "", ErrInvalid
	}
	return genToken(GetTokenSubject(token), GetTokenSession(token))
}

func Valid(signed string) bool {
	token, err := jwt.ParseWithClaims(signed, &JWTClaims{},
		func(token *jwt.Token) (interface{}, error) {
			return jwtKey, nil
		})
	if err != nil || !token.Valid || token.Method != jwtSign {
		return false
	}
	if GetTokenSession(signed) == "" || GetTokenSubject(signed) == "" {
		return false
	}
	return true
}

func getClaims(token string) (*JWTClaims, error) {
	parsed, _, err := jwt.NewParser().ParseUnverified(token, &JWTClaims{})
	if err != nil {
		logger.Log().WithErr(err).Error("token claims parse failed")
	}
	return parsed.Claims.(*JWTClaims), err
}

func GetTokenSubject(token string) string {
	claims, err := getClaims(token)
	if err != nil {
		return ""
	}
	return claims.Subject
}

func GetTokenSession(token string) string {
	claims, err := getClaims(token)
	if err != nil {
		return ""
	}
	return claims.Session
}
