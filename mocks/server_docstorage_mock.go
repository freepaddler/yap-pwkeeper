// Code generated by MockGen. DO NOT EDIT.
// Source: documents.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "yap-pwkeeper/internal/pkg/models"

	gomock "github.com/golang/mock/gomock"
)

// MockDocStorage is a mock of DocStorage interface.
type MockDocStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDocStorageMockRecorder
}

// MockDocStorageMockRecorder is the mock recorder for MockDocStorage.
type MockDocStorageMockRecorder struct {
	mock *MockDocStorage
}

// NewMockDocStorage creates a new mock instance.
func NewMockDocStorage(ctrl *gomock.Controller) *MockDocStorage {
	mock := &MockDocStorage{ctrl: ctrl}
	mock.recorder = &MockDocStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocStorage) EXPECT() *MockDocStorageMockRecorder {
	return m.recorder
}

// AddCard mocks base method.
func (m *MockDocStorage) AddCard(ctx context.Context, card models.Card) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCard", ctx, card)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCard indicates an expected call of AddCard.
func (mr *MockDocStorageMockRecorder) AddCard(ctx, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockDocStorage)(nil).AddCard), ctx, card)
}

// AddCredential mocks base method.
func (m *MockDocStorage) AddCredential(ctx context.Context, credential models.Credential) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCredential", ctx, credential)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCredential indicates an expected call of AddCredential.
func (mr *MockDocStorageMockRecorder) AddCredential(ctx, credential interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCredential", reflect.TypeOf((*MockDocStorage)(nil).AddCredential), ctx, credential)
}

// AddFile mocks base method.
func (m *MockDocStorage) AddFile(ctx context.Context, file models.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", ctx, file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFile indicates an expected call of AddFile.
func (mr *MockDocStorageMockRecorder) AddFile(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockDocStorage)(nil).AddFile), ctx, file)
}

// AddNote mocks base method.
func (m *MockDocStorage) AddNote(ctx context.Context, note models.Note) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNote", ctx, note)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNote indicates an expected call of AddNote.
func (mr *MockDocStorageMockRecorder) AddNote(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNote", reflect.TypeOf((*MockDocStorage)(nil).AddNote), ctx, note)
}

// GetCard mocks base method.
func (m *MockDocStorage) GetCard(ctx context.Context, docId, userId string) (models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", ctx, docId, userId)
	ret0, _ := ret[0].(models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockDocStorageMockRecorder) GetCard(ctx, docId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockDocStorage)(nil).GetCard), ctx, docId, userId)
}

// GetCardsStream mocks base method.
func (m *MockDocStorage) GetCardsStream(ctx context.Context, userId string, minSerial, maxSerial int64, chData chan interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardsStream", ctx, userId, minSerial, maxSerial, chData)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCardsStream indicates an expected call of GetCardsStream.
func (mr *MockDocStorageMockRecorder) GetCardsStream(ctx, userId, minSerial, maxSerial, chData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardsStream", reflect.TypeOf((*MockDocStorage)(nil).GetCardsStream), ctx, userId, minSerial, maxSerial, chData)
}

// GetCredential mocks base method.
func (m *MockDocStorage) GetCredential(ctx context.Context, docId, userId string) (models.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredential", ctx, docId, userId)
	ret0, _ := ret[0].(models.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredential indicates an expected call of GetCredential.
func (mr *MockDocStorageMockRecorder) GetCredential(ctx, docId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredential", reflect.TypeOf((*MockDocStorage)(nil).GetCredential), ctx, docId, userId)
}

// GetCredentialsStream mocks base method.
func (m *MockDocStorage) GetCredentialsStream(ctx context.Context, userId string, minSerial, maxSerial int64, chData chan interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsStream", ctx, userId, minSerial, maxSerial, chData)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCredentialsStream indicates an expected call of GetCredentialsStream.
func (mr *MockDocStorageMockRecorder) GetCredentialsStream(ctx, userId, minSerial, maxSerial, chData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsStream", reflect.TypeOf((*MockDocStorage)(nil).GetCredentialsStream), ctx, userId, minSerial, maxSerial, chData)
}

// GetFile mocks base method.
func (m *MockDocStorage) GetFile(ctx context.Context, docId, userId string) (models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, docId, userId)
	ret0, _ := ret[0].(models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockDocStorageMockRecorder) GetFile(ctx, docId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockDocStorage)(nil).GetFile), ctx, docId, userId)
}

// GetFileInfo mocks base method.
func (m *MockDocStorage) GetFileInfo(ctx context.Context, docId, userId string) (models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", ctx, docId, userId)
	ret0, _ := ret[0].(models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockDocStorageMockRecorder) GetFileInfo(ctx, docId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockDocStorage)(nil).GetFileInfo), ctx, docId, userId)
}

// GetFilesInfoStream mocks base method.
func (m *MockDocStorage) GetFilesInfoStream(ctx context.Context, userId string, minSerial, maxSerial int64, chData chan interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesInfoStream", ctx, userId, minSerial, maxSerial, chData)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFilesInfoStream indicates an expected call of GetFilesInfoStream.
func (mr *MockDocStorageMockRecorder) GetFilesInfoStream(ctx, userId, minSerial, maxSerial, chData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesInfoStream", reflect.TypeOf((*MockDocStorage)(nil).GetFilesInfoStream), ctx, userId, minSerial, maxSerial, chData)
}

// GetNote mocks base method.
func (m *MockDocStorage) GetNote(ctx context.Context, docId, userId string) (models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", ctx, docId, userId)
	ret0, _ := ret[0].(models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockDocStorageMockRecorder) GetNote(ctx, docId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockDocStorage)(nil).GetNote), ctx, docId, userId)
}

// GetNotesStream mocks base method.
func (m *MockDocStorage) GetNotesStream(ctx context.Context, userId string, minSerial, maxSerial int64, chData chan interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesStream", ctx, userId, minSerial, maxSerial, chData)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNotesStream indicates an expected call of GetNotesStream.
func (mr *MockDocStorageMockRecorder) GetNotesStream(ctx, userId, minSerial, maxSerial, chData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesStream", reflect.TypeOf((*MockDocStorage)(nil).GetNotesStream), ctx, userId, minSerial, maxSerial, chData)
}

// ModifyCard mocks base method.
func (m *MockDocStorage) ModifyCard(ctx context.Context, card models.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyCard", ctx, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyCard indicates an expected call of ModifyCard.
func (mr *MockDocStorageMockRecorder) ModifyCard(ctx, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyCard", reflect.TypeOf((*MockDocStorage)(nil).ModifyCard), ctx, card)
}

// ModifyCredential mocks base method.
func (m *MockDocStorage) ModifyCredential(ctx context.Context, credential models.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyCredential", ctx, credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyCredential indicates an expected call of ModifyCredential.
func (mr *MockDocStorageMockRecorder) ModifyCredential(ctx, credential interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyCredential", reflect.TypeOf((*MockDocStorage)(nil).ModifyCredential), ctx, credential)
}

// ModifyFile mocks base method.
func (m *MockDocStorage) ModifyFile(ctx context.Context, file models.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyFile", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyFile indicates an expected call of ModifyFile.
func (mr *MockDocStorageMockRecorder) ModifyFile(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyFile", reflect.TypeOf((*MockDocStorage)(nil).ModifyFile), ctx, file)
}

// ModifyFileInfo mocks base method.
func (m *MockDocStorage) ModifyFileInfo(ctx context.Context, file models.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyFileInfo", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyFileInfo indicates an expected call of ModifyFileInfo.
func (mr *MockDocStorageMockRecorder) ModifyFileInfo(ctx, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyFileInfo", reflect.TypeOf((*MockDocStorage)(nil).ModifyFileInfo), ctx, file)
}

// ModifyNote mocks base method.
func (m *MockDocStorage) ModifyNote(ctx context.Context, note models.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyNote", ctx, note)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyNote indicates an expected call of ModifyNote.
func (mr *MockDocStorageMockRecorder) ModifyNote(ctx, note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyNote", reflect.TypeOf((*MockDocStorage)(nil).ModifyNote), ctx, note)
}
